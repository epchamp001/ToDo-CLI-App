package app

func Run() {
	// Команды от пользователя:
	// 1) Какая-нибудь команда (например help), которая покажет список доступных команд

	// 2) Какая-то базовая команда, которая просто показывает список текущих задач
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся, и отображаем их пользователю через функцию ShowTasks

	// 3) Создание task с описанием и дедлайном. Функция CreateTask
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Вызываем CreateTask
	// Отображаем пользователю текущий массив задач
	// Сохраняем список в файл tasks.json SaveTasksToFile

	// 4) Создание subtask к task по id. Пользователь указывает parentID и описание, затем вызываемся CreateSubtask
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Вызываем CreateSubtask
	// Отображаем пользователю текущий массив задач
	// Сохраняем список в файл tasks.json SaveTasksToFile

	// 5) Удаление subtask у task. Указывается parentID, subtaskID и затем будет вызываться DeleteSubtaskFromTask
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Вызываем DeleteSubtaskFromTask
	// Отображаем пользователю текущий массив задач
	// Сохраняем список в файл tasks.json SaveTasksToFile

	// 6) Удаление task по id. Функция DeleteTask
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Вызываем DeleteTask
	// Отображаем пользователю текущий массив задач
	// Сохраняем список в файл tasks.json SaveTasksToFile

	// 7) Поменять задания местами(будет поменян дедлайн) по id. Функция ReplaceTasks
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Вызываем ReplaceTasks
	// Отображаем пользователю текущий массив задач
	// Сохраняем список в файл tasks.json SaveTasksToFile

	// 8) Изменить статус задачи(или подзадачи) по id. UpdateTaskStatus
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Вызываем UpdateTaskStatus
	// Отображаем пользователю текущий массив задач
	// Сохраняем список в файл tasks.json SaveTasksToFile

	// После команд 2-8 должна запускаться функция, которая будет отображать текщий список задач

	// 9) Показать историю за последние days. Метод  (h *History) GetEntriesForLastDays
	// создаем структуру History. Загружаем в нее историю из файла history.json с помощью метода
	// Вызываем метод (h *History) GetEntriesForLastDays, который вернет ([]*HistoryEntry, error)
	// Затем вызываем метод для отображения истории (h *History) ShowHistory

	// 10) Показать историю за определенную дату. Метод (h *History) GetEntriesForDate
	// создаем структуру History. Загружаем в нее историю из файла history.json с помощью метода
	// Вызываем метод (h *History) GetEntriesForDate, который вернет ([]*HistoryEntry, error)
	// Затем вызываем метод для отображения истории (h *History) ShowHistory

	// 11) Очистить историю. Метод (h *History) ClearAll()
	// создаем структуру History. Загружаем в нее историю из файла history.json с помощью метода
	// Вызываем метод (h *History) ClearAll()
	// Вызываем метод для сохранения истории в файл history.json

	// 12) Показать всю историю
	// создаем структуру History. Загружаем в нее историю из файла history.json с помощью метода
	// Затем вызываем метод для отображения истории (h *History) ShowHistory

	// 13) Показать tasks на сегодня. Функция GetTasksWithTodayDeadline
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Вызываем GetTasksWithTodayDeadline, которая возвращает []*entity.Task
	// Отображаем пользователю полученный массив задач

	// 14) Очистить устаревшие записи в истории
	// создаем структуру History. Загружаем в нее историю из файла history.json с помощью метода
	// Вызываем метод (h *History) ClearOldEntry
	// Затем вызываем метод для отображения истории (h *History) ShowHistory
	// Вызываем метод для сохранения истории в файл history.json (h *History) SaveToFile(filename string)

	// 15) Очистить список задач от выполненных или ненужных, то есть оставить только активные
	// Подгружаем в срез tasks из файла tasks.json текущие задание которые там хранятся
	// Перед сохранением в файл получаем два среза activeTask и inactiveTask, с помощью функции SplitTasksByStatus
	// activeTask отображаем пользователю через фукнцию ShowTasks
	// затем activeTask мы передаем в SaveTasksToFile для сохранения Active заданий в tasks.json
	// В цикле идем по срезу inactiveTask и для каждого Task создаем запись в истории с помощью CreateEntryInHistory// После цикла мы вызываем метод для History, который выполнит очищение истории от устаревших записей ClearOldEntry
	// После этого мы вызываем метод для сохранения истории в файл history.json

	// 16) Получить подробное описание Task из истории по id Entry.
	// создаем структуру History. Загружаем в нее историю из файла history.json с помощью метода
	// Вызываем метод (h *History) GetEntry
	// И затем у полученного объекта *HistoryEntry вызываем метод GetTask, результат работы которого передаем в ShowTask

	//  17) Показать подробную информацию о задаче по id. Функция ShowTask
}
